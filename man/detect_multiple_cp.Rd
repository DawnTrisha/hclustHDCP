% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MultipleChangePoint_NumKnown.R
\name{detect_multiple_cp}
\alias{detect_multiple_cp}
\title{Detecting multiple change-point locations for known number of change-points}
\usage{
detect_multiple_cp(X = NULL, D = NULL, numcp, dist.method = "average")
}
\arguments{
\item{X}{Data matrix (n X p) where n denotes number of observations. Each row is a p dimensional observation vector. n observations are arranged in chronological order.}

\item{D}{Distance matrix (n X n) corresponding to the data matrix. Either the data matrix or the distance matrix should be supplied.}

\item{numcp}{Number of change-points to detect}

\item{dist.method}{Linkage method to use in hierarchical clustering for calculating the distances between consecutive clusters. This must be one of "single", "average" or "complete". Default is "average".}
}
\value{
Returns a numeric vector denoting estimated change-point locations
}
\description{
Detecting multiple change-point locations for known number of change-points
}
\examples{
# Example 1
set.seed(1)
# Generate data matrix
X1 = matrix(rnorm((15 * 50), mean = 0, sd = 1), nrow = 15, ncol = 50)
X2 = matrix(rnorm((15 * 50), mean = 1, sd = 1), nrow = 15, ncol = 50)
X3 = matrix(rnorm((15 * 50), mean = 2, sd = 1), nrow = 15, ncol = 50)
X = rbind(X1, X2, X3)

# Detect two change-points with default average linkage
detect_multiple_cp(X = X, numcp = 2)

# Detect four change-points with default complete linkage
detect_multiple_cp(X = X, numcp = 4, dist.method = "complete")

# Example 2
set.seed(1)
# Generate data matrix
X1 = matrix(rnorm((15 * 50), mean = 0, sd = 1), nrow = 15, ncol = 50)
X2 = matrix(rnorm((15 * 50), mean = 1, sd = 1), nrow = 15, ncol = 50)
X3 = matrix(rnorm((15 * 50), mean = 2, sd = 1), nrow = 15, ncol = 50)
X = rbind(X1, X2, X3)

# Calculate distance matrix
D_mat = as.matrix(stats::dist(X, method = "euclidean"))

# Only distance matrix is supplied
# Detect multiple change-points (here 2) with default average linkage
detect_multiple_cp(D = D_mat, numcp = 2)  # correct change-points are detected
}
